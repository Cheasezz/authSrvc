// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/session": {
            "post": {
                "description": "create session in db with ip and user agent.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "create session",
                "operationId": "create-session",
                "parameters": [
                    {
                        "type": "string",
                        "example": "fb62aa81-1172-4c73-8fc3-cd5a446346bf",
                        "description": "User uuid",
                        "name": "uuid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "JWT refreshToken Example: refreshToken=9838c5.9cf.f93e21; Path=/; Max-Age=2628000; HttpOnly; Secure; SameSite=None"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.errBadRequestResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.errTokenIssuanceResp"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "check access and refresh tokens.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "logout",
                "operationId": "delete-session",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "JWT refreshToken Example: refreshToken=; Path=/; Max-Age=2628000; HttpOnly; Secure; SameSite=None"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.errAuthResp"
                        }
                    }
                }
            }
        },
        "/session/me": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "chek Authorization header and extract user id from claims in jwt.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "return curent user id",
                "operationId": "me",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.MeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.errMeResp"
                        }
                    }
                }
            }
        },
        "/session/refresh": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "check access and refresh tokens.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "refresh session",
                "operationId": "refresh-session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refersh token cookie",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        },
                        "headers": {
                            "Set-Cookie": {
                                "type": "string",
                                "description": "JWT refreshToken Example: refreshToken=9838c5.9cf.f93e21; Path=/; Max-Age=2628000; HttpOnly; Secure; SameSite=None"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.errAuthResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.errTokenIssuanceResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.MeResponse": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTE5MDUzMDQsInN1YiI6ImZiNjJhYTgxLTExNzItNGM3My04ZmMzLWNkNWE0NDYzNDZiYSJ9.SZHR-VexEcSNwe1GbmiG0p8lQVMTLH9MOIWV2N3I4ZMXEtYWF4Zcm4SKeaGFND7JCZ858VmId1WgPXKxTzF_iA"
                }
            }
        },
        "handlers.TokenResponse": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTE5MDUzMDQsInN1YiI6ImZiNjJhYTgxLTExNzItNGM3My04ZmMzLWNkNWE0NDYzNDZiYSJ9.SZHR-VexEcSNwe1GbmiG0p8lQVMTLH9MOIWV2N3I4ZMXEtYWF4Zcm4SKeaGFND7JCZ858VmId1WgPXKxTzF_iA"
                },
                "refresh_cookie": {
                    "description": "Это поле только для swagger и имеет значение только в dev моде.",
                    "type": "string",
                    "example": "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiZDdhOTk2YjctOWZlNi00YjRlLWI4NWItODM3YzAyN2RmNDU3Iiwic3ViIjoiZmI2MmFhODEtMTE3Mi00YzczLThmYzMtY2Q1YTQ0NjM0NmJhIiwiZXhwIjoxNzUzNjE4MzUxfQ.SdTNSloBSOnxHJeq6FWlN3UuiyZBOzL9P5OQVp23Wlg; Path=/; Max-Age=86400; HttpOnly; SameSite=Lax"
                }
            }
        },
        "handlers.errAuthResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "error authorization"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.errBadRequestResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "create session: error: uncorrect uuid"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.errMeResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "me error: error on server side"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handlers.errTokenIssuanceResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "create session error: error on server side or user already exist"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        }
    },
    "securityDefinitions": {
        "bearerAuth": {
            "description": "Enter the token with the ` + "`" + `Bearer` + "`" + ` prefix",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Auth server API",
	Description:      "API Server for Auth",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
